# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_iHHhokqGnjO3N5soodOu6m2-C9T8FnE
"""

# inference.py
import os
import json
import numpy as np
import tensorflow as tf
from transformers import BertTokenizer, TFBertModel

# Load model architecture from the script
from model_architecture import SequentialModel

# Initialize BERT model and tokenizer
bert_model = TFBertModel.from_pretrained('bert-base-uncased')
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

# Initialize the SequentialModel
output_dim = 1
model = SequentialModel(output_dim)

# Load model weights
model.load_weights('/opt/ml/model/model_weights.h5')

def input_fn(request_body, request_content_type):
    if request_content_type == 'application/json':
        data = json.loads(request_body)
        return data
    raise ValueError(f"Unsupported content type: {request_content_type}")

def predict_fn(input_data, model):
    tdp = float(input_data['TDP'])
    upcs = float(input_data['UPCs'])
    category = input_data['Category']
    manufacturer = input_data['Manufacturer']
    products = input_data['Products']
    time = input_data['Time']

    # Tokenize the string inputs using BERT tokenizer
    def tokenize_inputs(texts):
        tokenized = tokenizer(texts, padding=True, truncation=True, return_tensors='tf')
        return {'input_ids': tokenized['input_ids'], 'attention_mask': tokenized['attention_mask']}

    tensor_Products = tokenize_inputs([products])
    tensor_Category = tokenize_inputs([category])
    tensor_Manufacturer = tokenize_inputs([manufacturer])
    tensor_Time = tokenize_inputs([time])

    bert_output_product = bert_model(tensor_Products)[1]
    bert_output_category = bert_model(tensor_Category)[1]
    bert_output_manufacturer = bert_model(tensor_Manufacturer)[1]
    bert_output_time = bert_model(tensor_Time)[1]

    concatenate_string_inputs = tf.concat([bert_output_product, bert_output_category, bert_output_manufacturer, bert_output_time], axis=-1)

    # Convert numerical inputs to tensors
    tensor_TDP = tf.convert_to_tensor([tdp], dtype=tf.float32)
    tensor_UPCs = tf.convert_to_tensor([upcs], dtype=tf.float32)
    tensor_TDP = tf.reshape(tensor_TDP, (tensor_TDP.shape[0], 1))
    tensor_UPCs = tf.reshape(tensor_UPCs, (tensor_UPCs.shape[0], 1))

    # Predict the sales
    prediction = model.predict([concatenate_string_inputs, tensor_TDP, tensor_UPCs])
    return {'prediction': prediction.tolist()}

def output_fn(prediction, content_type):
    return json.dumps(prediction)